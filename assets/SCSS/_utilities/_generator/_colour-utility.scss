/*----------------------------------------
    # Colour Utility
----------------------------------------*/
@use "../../_abstracts/colours";
@use '../../_utilities/_mixins/media-query' as *;

@each $color, $shades in colours.$colors {
  /*----------------------------------------
    #{$color} utility classes
  ----------------------------------------*/
  @each $shade, $value in $shades {
    @if $shade == main {
      // Color Classes
      .color-#{$color}-#{$shade} {
        color: var(--#{$color}-#{$shade});
        & > *,a,p,h1,h2,h3,h4,h5,h6,hr  {
          &:nth-child(1n){
            color: var(--#{$color}-#{$shade});
          }
        }
      }
      // Styles for background colours
      .bg-#{$color}-#{$shade} {
        background-color: var(--#{$color}-#{$shade});
        color: var(--#{$color}-invert);

        > *,
        &.card > *,
        &.textBlock .stack > *,
        .draw > *,
        .stack > *,
        blockquote {
          color: var(--#{$color}-invert);
        }

        a,p,ul,li,h1,h2,h3,h4,h5,h6 {
          color: var(--#{$color}-invert);
        }

        // Styles for buttons inside a BG section
        .button-wrap, &.card .button-wrap {
          .button:not(.master) {
            &.primary {
              background-color: var(--#{$color}-highlight);
              color: var(--#{$color}-invert);
              border-color: var(--#{$color}-invert);

              &:hover {
                background-color: var(--#{$color}-main);
                color: var(--#{$color}-highlight);
                border-color: var(--#{$color}-highlight);
              }
            }

            &.ghost {
              color: var(--#{$color}-invert);

              &:hover {
                background-color: var(--#{$color}-invert);
                color: var(--#{$color}-main);
                border-color: var(--#{$color}-invert);
              }
            }

            &.secondary {
              color: var(--#{$color}-invert);
            }
          }
        }

        // Styles for buttons with a BG on the element
        &.button:not(.master) {
          &.primary {
            background-color: var(--#{$color}-main) !important;
            color: var(--#{$color}-invert) !important;
            border-color: var(--#{$color}-main) !important;

            &:hover {
              background-color: var(--#{$color}-highlight) !important;
              color: var(--#{$color}-main) !important;
              border-color: var(--#{$color}-main) !important;
            }
          }

          &.ghost {
            &:nth-child(1n) {
              color: var(--#{$color}-main);

              &:hover {
                background-color: var(--#{$color}-main);
                color: var(--#{$color}-invert);
                border-color: var(--#{$color}-main);
              }
            }
          }
        }

        // Styles for icon colours
        .fas, .fa {
          &:before {
            color: var(--#{$color}-invert);
          }
        }

        #menu-icon {
          span:before {
            color: var(--#{$color}-invert);
          }
        }

        nav {
          .nav-link {
            .sub-menu button {
              &:before {
                color: var(--#{$color}-invert);
              }
            }
          }

          &.high-light {
            a {
              color: var(--#{$color}-invert);

              &:hover {
                color: var(--#{$color}-highlight);
                background: var(--#{$color}-main);
              }
            }

            .sub-nav {
              a {
                &:hover {
                  color: var(--#{$color}-main);
                  background: var(--#{$color}-highlight);
                }
              }
            }
          }

          &.underlineText {
            a {
              color: var(--#{$color}-invert);
            }
          }

          &.underlineBlock {
            a {
              color: var(--#{$color}-invert);
            }

            &:hover {
              &:after {
                background-color: var(--#{$color}-invert);
              }
            }

            .nav-link {
              &:after {
                background-color: var(--#{$color}-invert);
              }
            }
          }

          .sub-nav {
            @include mq-min(tablet) {
              background-color: var(--#{$color}-main);
            }
          }
        }

        .slick-dots {
          li {
            .tab {
              &:before {
                color: var(--#{$color}-invert);
              }
            }

            button {
              &:before {
                color: var(--#{$color}-invert);
              }
            }
          }
        }

        .slick-arrow {
          &:before {
            color: var(--#{$color}-invert);
          }
        }

        .svgColour {
          svg * {
            fill: var(--#{$color}-invert);
          }
        }

        &.overlay {
          &:after, .slick-slide:after {
            background-color: var(--#{$color}-main);
          }

          &.radial {
            &:after, .slick-slide:after {
              background: radial-gradient(circle, #ffffff 0%, var(--#{$color}-main) 100%);
            }
          }
        }

        &.cta {
          .label:not(*[class*="bg-"]) {
            background-color: var(--#{$color}-highlight);
            color: var(--#{$color}-invert);
          }
        }

        &.form-element {
          background-color: var(--#{$color}-#{$shade});
          color: var(--#{$color}-invert);
        }

        > .form-element {
          background-color: var(--#{$color}-highlight);
          border: 1px solid var(--#{$color}-invert);
          color: var(--#{$color}-invert);

          &:focus, &:active {
            border: 1px solid var(--#{$color}-highlight);
          }
        }

        input[type="submit"]:not(.master) {
          background-color: var(--#{$color}-invert);
          color: var(--#{$color}-main);
          border-color: var(--#{$color}-invert);

          &:hover {
            background-color: var(--#{$color}-highlight);
            color: var(--#{$color}-invert);
            border-color: var(--#{$color}-invert);
          }
        }

        &.accordion-block.active {
          background-color: var(--#{$color}-highlight);
        }
        //.notice{
        //  background-color: var(--#{$color}-highlight);
        //}
      }
      .border-#{$color}-#{$shade} {
        border-top-color: var(--#{$color}-#{$shade});
        border-bottom-color: var(--#{$color}-#{$shade});
        border-left-color: var(--#{$color}-#{$shade});
        border-right-color: var(--#{$color}-#{$shade});

        i.fas, i.fa {
          &:before {
            color: var(--#{$color}-#{$shade});
          }
        }
      }
      .fill-#{$color}-#{$shade} {
        * {
          fill: var(--#{$color}-#{$shade})!important;
        }
      }
    }
  }
}


@each $color, $shades in colours.$baseColors {
  /*----------------------------------------
    #{$color} utility classes
  ----------------------------------------*/
  @each $shade, $value in $shades {
    .color-#{$color}-#{$shade} {
      color: var(--#{$color}-#{$shade});
      & > *,a,p,h1,h2,h3,h4,h5,h6,hr  {
        &:nth-child(1n){
          color: var(--#{$color}-#{$shade});
        }
      }
    }

  }
}